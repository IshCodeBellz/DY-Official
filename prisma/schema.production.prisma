generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("postgresql://postgres:IyyDUbZtSQezywiXdxmpQCbDIjUHUJuU@hopper.proxy.rlwy.net:40829/railway")
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  brandId     String
  categoryId  String
  sku         String   @unique
  priceCents  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  brand    Brand    @relation(fields: [brandId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  images         ProductImage[]
  variants       ProductVariant[]
  reviews        ProductReview[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  wishlistItems  WishlistItem[]
  bundleItems    ProductBundleItem[]
  inventoryItems InventoryItem[]
  behaviors      UserBehavior[]

  @@index([brandId])
  @@index([categoryId])
  @@index([isActive])
  @@index([createdAt])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?
  variant   ProductVariant?   @relation(fields: [variantId], references: [id])
  imageType String            @default("product")

  @@index([productId])
  @@index([position])
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  type      String   // "color", "size", etc.
  priceCents Int?    // optional price override
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product        Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  images         ProductImage[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  inventoryItems InventoryItem[]

  @@unique([productId, type, value])
  @@index([productId])
  @@index([type])
}

model ProductReview {
  id          String   @id @default(cuid())
  productId   String
  authorName  String
  authorEmail String?
  rating      Int      // 1-5
  title       String?
  content     String?
  isVerified  Boolean  @default(false)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([rating])
  @@index([isPublished])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth fields
  passwordHash      String?
  emailVerifyToken  String?   @unique
  passwordResetToken String?  @unique
  passwordResetExpires DateTime?

  // Profile
  phone         String?
  dateOfBirth   DateTime?
  preferences   Json?

  // MFA
  mfaEnabled    Boolean @default(false)
  mfaSecret     String?
  backupCodes   String?

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  carts         Cart[]
  behaviors     UserBehavior[]
  wishlists     Wishlist[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String?  @unique
  sessionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  variantId String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id                String    @id @default(cuid())
  userId            String?
  customerEmail     String
  customerName      String
  status            String    @default("PENDING") // PENDING, PAID, SHIPPED, DELIVERED, CANCELLED
  currency          String    @default("USD")
  subtotalCents     Int
  taxCents          Int       @default(0)
  shippingCents     Int       @default(0)
  discountCents     Int       @default(0)
  totalCents        Int
  paymentIntentId   String?   @unique
  paymentStatus     String    @default("PENDING") // PENDING, SUCCEEDED, FAILED
  shippingAddress   Json?
  billingAddress    Json?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user   User?       @relation(fields: [userId], references: [id])
  items  OrderItem[]
  events OrderEvent[]

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
}

model OrderItem {
  id             String   @id @default(cuid())
  orderId        String
  productId      String
  variantId      String?
  quantity       Int
  unitPriceCents Int
  totalCents     Int
  createdAt      DateTime @default(now())

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model OrderEvent {
  id        String   @id @default(cuid())
  orderId   String
  type      String   // CREATED, PAID, SHIPPED, DELIVERED, CANCELLED, etc.
  message   String?
  metadata  Json?
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([type])
  @@index([createdAt])
}

model DiscountCode {
  id              String    @id @default(cuid())
  code            String    @unique
  type            String    // PERCENTAGE, FIXED_AMOUNT
  value           Int       // percentage (0-100) or cents
  minOrderCents   Int?
  maxDiscountCents Int?
  maxUses         Int?
  currentUses     Int       @default(0)
  isActive        Boolean   @default(true)
  startsAt        DateTime?
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([code])
  @@index([isActive])
}

// Phase 3: Advanced Features

model UserBehavior {
  id         String   @id @default(cuid())
  userId     String?
  sessionId  String?
  productId  String?
  eventType  String   // view, click, search, purchase, etc.
  metadata   Json?
  timestamp  DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([sessionId])
  @@index([productId])
  @@index([eventType])
  @@index([timestamp])
}

model ProductBundle {
  id          String   @id @default(cuid())
  name        String
  description String?
  discountPercent Int  @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items ProductBundleItem[]

  @@index([isActive])
}

model ProductBundleItem {
  id         String   @id @default(cuid())
  bundleId   String
  productId  String
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())

  bundle  ProductBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id])

  @@unique([bundleId, productId])
  @@index([bundleId])
  @@index([productId])
}

model InventoryItem {
  id         String   @id @default(cuid())
  productId  String
  variantId  String?
  quantity   Int      @default(0)
  reserved   Int      @default(0)
  threshold  Int      @default(10) // low stock alert threshold
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  alerts  InventoryAlert[]

  @@unique([productId, variantId])
  @@index([productId])
  @@index([quantity])
}

model InventoryAlert {
  id             String   @id @default(cuid())
  inventoryId    String
  type           String   // LOW_STOCK, OUT_OF_STOCK, OVER_THRESHOLD
  message        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  inventory InventoryItem @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

// Phase 4: Social Features

model Wishlist {
  id          String   @id @default(cuid())
  userId      String
  name        String   @default("My Wishlist")
  description String?
  isPublic    Boolean  @default(false)
  shareToken  String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WishlistItem[]

  @@index([userId])
  @@index([isPublic])
  @@index([shareToken])
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  notes      String?
  createdAt  DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
}