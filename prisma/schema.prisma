generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            String         @id @default(cuid())
  sku           String         @unique
  name          String
  description   String
  priceCents    Int
  brandId       String?
  categoryId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  cartLines     CartLine[]
  category      Category?      @relation(fields: [categoryId], references: [id])
  brand         Brand?         @relation(fields: [brandId], references: [id])
  images        ProductImage[]
  sizes         SizeVariant[]
  wishlistItems WishlistItem[]
  metrics       ProductMetrics?

  @@index([categoryId])
  @@index([brandId])
  @@index([deletedAt])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model SizeVariant {
  id        String   @id @default(cuid())
  productId String
  label     String
  stock     Int      @default(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, label])
  @@index([productId])
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String?
  isAdmin      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cart         Cart?
  wishlist     Wishlist?
  orders       Order[]
  addresses    Address[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  lines     CartLine[]
}

model CartLine {
  id                 String   @id @default(cuid())
  cartId             String
  productId          String
  size               String?
  qty                Int      @default(1)
  priceCentsSnapshot Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id])
  cart               Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, size])
  @@index([productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String?        @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User?          @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  size       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId, size])
  @@index([productId])
}

// Phase 3: Order & Checkout domain models
// We snapshot monetary values at order time to preserve historical accuracy even if product pricing changes later.
model Order {
  id                String        @id @default(cuid())
  userId            String?
  status            String        @default("PENDING") // PENDING | AWAITING_PAYMENT | PAID | FULFILLING | SHIPPED | DELIVERED | CANCELLED | REFUNDED
  checkoutIdempotencyKey String?  @unique
  subtotalCents     Int           // sum of item (priceSnapshot * qty)
  discountCents     Int           @default(0)
  taxCents          Int           @default(0)
  shippingCents     Int           @default(0)
  totalCents        Int           // subtotal - discount + tax + shipping
  currency          String        @default("USD")
  email             String        // snapshot of customer email at time of order
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  paidAt            DateTime?
  cancelledAt       DateTime?
  items             OrderItem[]
  shippingAddressId String?
  billingAddressId  String?
  shippingAddress   Address?      @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id])
  payments          PaymentRecord[]
  user              User?         @relation(fields: [userId], references: [id])
  discountCodeId    String?
  discountCodeCode  String?       // snapshot of applied code text
  discountCodeValueCents Int?     // snapshot of discount value applied (for fixed codes) when relevant
  discountCodePercent Int?        // snapshot percent value if percent based
  discountCode       DiscountCode? @relation(fields: [discountCodeId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String   // reference for analytics; product could later be deleted
  sku             String
  nameSnapshot    String
  size            String?
  qty             Int      @default(1)
  unitPriceCents  Int      // snapshot of price per unit at time of ordering
  lineTotalCents  Int      // unitPriceCents * qty
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Address {
  id         String    @id @default(cuid())
  userId     String?
  fullName   String
  line1      String
  line2      String?
  city       String
  region     String?   // state / province
  postalCode String
  country    String
  phone      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id])
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@index([userId])
  @@index([country])
}

model PaymentRecord {
  id              String       @id @default(cuid())
  orderId         String
  provider        String       // e.g. STRIPE
  providerRef     String       // e.g. payment_intent id
  amountCents     Int
  currency        String       @default("USD")
  status          String       @default("PAYMENT_PENDING") // PAYMENT_PENDING | AUTHORIZED | CAPTURED | FAILED | REFUNDED | CANCELLED
  rawPayload      String?      // JSON string snapshot (SQLite lacks native JSON type)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  order           Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([provider, providerRef])
  @@index([orderId])
    @@index([status])
}

// Discount codes with simple fixed or percent logic (SQLite-friendly string type for kind)
model DiscountCode {
  id               String    @id @default(cuid())
  code             String    @unique
  kind             String    // FIXED | PERCENT
  valueCents       Int?      // used when kind = FIXED
  percent          Int?      // 1-100 when kind = PERCENT
  minSubtotalCents Int?      // optional minimum cart subtotal requirement
  usageLimit       Int?      // total uses allowed (global)
  timesUsed        Int       @default(0)
  startsAt         DateTime? // optional start date
  endsAt           DateTime? // optional end date
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  orders           Order[]

  @@index([code])
  @@index([startsAt])
  @@index([endsAt])
}

// Lightweight aggregated engagement metrics to power Trending Now.
model ProductMetrics {
  productId   String  @id
  views       Int     @default(0) // tile impressions
  detailViews Int     @default(0)
  wishlists   Int     @default(0)
  addToCart   Int     @default(0)
  purchases   Int     @default(0)
  updatedAt   DateTime @updatedAt
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}
